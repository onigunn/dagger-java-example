// Code generated by dagger-compiler.  Do not edit.
package net.schoengeist.java.dwx;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Rocket>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Rocket} and its
 * dependencies.
 *
 * Being a {@code Provider<Rocket>} and handling creation and
 * preparation of object instances.
 */
public final class Rocket$$InjectAdapter extends Binding<Rocket>
    implements Provider<Rocket> {
  private Binding<Tank> tank;

  public Rocket$$InjectAdapter() {
    super("net.schoengeist.java.dwx.Rocket", "members/net.schoengeist.java.dwx.Rocket", NOT_SINGLETON, Rocket.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    tank = (Binding<Tank>) linker.requestBinding("net.schoengeist.java.dwx.Tank", Rocket.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(tank);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Rocket>}.
   */
  @Override
  public Rocket get() {
    Rocket result = new Rocket(tank.get());
    return result;
  }

}
